
HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000026c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000504  0800050c  0001050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000504  08000504  00010504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000508  08000508  00010508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  24000000  24000000  0001050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  24000000  0800050c  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000024  0800050c  00020024  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0001050c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000f04  00000000  00000000  0001053a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000001c1  00000000  00000000  0001143e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000060  00000000  00000000  00011600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000048  00000000  00000000  00011660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00027972  00000000  00000000  000116a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000005f2  00000000  00000000  0003901a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e50bf  00000000  00000000  0003960c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0011e6cb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000000c4  00000000  00000000  0011e720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000000 	.word	0x24000000
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080004ec 	.word	0x080004ec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000004 	.word	0x24000004
 80002d4:	080004ec 	.word	0x080004ec

080002d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	6039      	str	r1, [r7, #0]
 80002e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80002e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db0a      	blt.n	8000302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	490c      	ldr	r1, [pc, #48]	; (8000324 <__NVIC_SetPriority+0x4c>)
 80002f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002f6:	0112      	lsls	r2, r2, #4
 80002f8:	b2d2      	uxtb	r2, r2
 80002fa:	440b      	add	r3, r1
 80002fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000300:	e00a      	b.n	8000318 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4908      	ldr	r1, [pc, #32]	; (8000328 <__NVIC_SetPriority+0x50>)
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	f003 030f 	and.w	r3, r3, #15
 800030e:	3b04      	subs	r3, #4
 8000310:	0112      	lsls	r2, r2, #4
 8000312:	b2d2      	uxtb	r2, r2
 8000314:	440b      	add	r3, r1
 8000316:	761a      	strb	r2, [r3, #24]
}
 8000318:	bf00      	nop
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3b01      	subs	r3, #1
 8000338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800033c:	d301      	bcc.n	8000342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800033e:	2301      	movs	r3, #1
 8000340:	e00f      	b.n	8000362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000342:	4a0a      	ldr	r2, [pc, #40]	; (800036c <SysTick_Config+0x40>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3b01      	subs	r3, #1
 8000348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800034a:	210f      	movs	r1, #15
 800034c:	f04f 30ff 	mov.w	r0, #4294967295
 8000350:	f7ff ffc2 	bl	80002d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <SysTick_Config+0x40>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <SysTick_Config+0x40>)
 800035c:	2207      	movs	r2, #7
 800035e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000360:	2300      	movs	r3, #0
}
 8000362:	4618      	mov	r0, r3
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	e000e010 	.word	0xe000e010

08000370 <main>:

uint32_t u32Ticks = 0U;
uint8_t u8Update = 0U;

int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
    /* Loop forever */
	RCC->AHB4ENR |= RCC_AHB4ENR_GPIOBEN;
 8000374:	4b26      	ldr	r3, [pc, #152]	; (8000410 <main+0xa0>)
 8000376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800037a:	4a25      	ldr	r2, [pc, #148]	; (8000410 <main+0xa0>)
 800037c:	f043 0302 	orr.w	r3, r3, #2
 8000380:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	while(RCC_AHB4ENR_GPIOBEN != (RCC->AHB4ENR & RCC_AHB4ENR_GPIOBEN));
 8000384:	bf00      	nop
 8000386:	4b22      	ldr	r3, [pc, #136]	; (8000410 <main+0xa0>)
 8000388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800038c:	f003 0302 	and.w	r3, r3, #2
 8000390:	2b02      	cmp	r3, #2
 8000392:	d1f8      	bne.n	8000386 <main+0x16>

	GPIOB->MODER = (0x1U << GPIO_MODER_MODE0_Pos) |
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <main+0xa4>)
 8000396:	4a20      	ldr	r2, [pc, #128]	; (8000418 <main+0xa8>)
 8000398:	601a      	str	r2, [r3, #0]
			(0x1U << GPIO_MODER_MODE7_Pos) |
			(0x1U << GPIO_MODER_MODE14_Pos);
	GPIOB->OTYPER = (0x0U << GPIO_OTYPER_OT0_Pos) |
 800039a:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <main+0xa4>)
 800039c:	2200      	movs	r2, #0
 800039e:	605a      	str	r2, [r3, #4]
			(0x0U << GPIO_OTYPER_OT7_Pos) |
			(0x0U << GPIO_OTYPER_OT14_Pos);
	GPIOB->PUPDR = (0x0U << GPIO_PUPDR_PUPD0_Pos) |
 80003a0:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <main+0xa4>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]
			(0x0U << GPIO_PUPDR_PUPD7_Pos) |
			(0x0U << GPIO_PUPDR_PUPD14_Pos);
	GPIOB->OSPEEDR = (0x0U << GPIO_OSPEEDR_OSPEED0_Pos) |
 80003a6:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <main+0xa4>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
			(0x0U << GPIO_OSPEEDR_OSPEED7_Pos) |
			(0x0U << GPIO_OSPEEDR_OSPEED14_Pos);
	GPIOB->ODR = (0x0U << GPIO_ODR_OD0_Pos) |
 80003ac:	4b19      	ldr	r3, [pc, #100]	; (8000414 <main+0xa4>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	615a      	str	r2, [r3, #20]
			(0x0U << GPIO_ODR_OD7_Pos) |
			(0x0U << GPIO_ODR_OD14_Pos);

	SysTick_Config(0xFFFFF0U);
 80003b2:	481a      	ldr	r0, [pc, #104]	; (800041c <main+0xac>)
 80003b4:	f7ff ffba 	bl	800032c <SysTick_Config>

	while(1U)
	{
		if(1U == u8Update)
 80003b8:	4b19      	ldr	r3, [pc, #100]	; (8000420 <main+0xb0>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d1fb      	bne.n	80003b8 <main+0x48>
		{
			u8Update = 0U;
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <main+0xb0>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
			if(0U == (u32Ticks & 0x3U))
 80003c6:	4b17      	ldr	r3, [pc, #92]	; (8000424 <main+0xb4>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f003 0303 	and.w	r3, r3, #3
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d105      	bne.n	80003de <main+0x6e>
			{
				GPIOB->ODR ^= (0x1U << GPIO_ODR_OD0_Pos);
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <main+0xa4>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a0f      	ldr	r2, [pc, #60]	; (8000414 <main+0xa4>)
 80003d8:	f083 0301 	eor.w	r3, r3, #1
 80003dc:	6153      	str	r3, [r2, #20]
			}
			if(0U == (u32Ticks & 0x7U))
 80003de:	4b11      	ldr	r3, [pc, #68]	; (8000424 <main+0xb4>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f003 0307 	and.w	r3, r3, #7
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d105      	bne.n	80003f6 <main+0x86>
			{
				GPIOB->ODR ^= (0x1U << GPIO_ODR_OD7_Pos);
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <main+0xa4>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a09      	ldr	r2, [pc, #36]	; (8000414 <main+0xa4>)
 80003f0:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80003f4:	6153      	str	r3, [r2, #20]
			}
			if(0U == (u32Ticks & 0xFU))
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <main+0xb4>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f003 030f 	and.w	r3, r3, #15
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d1da      	bne.n	80003b8 <main+0x48>
			{
				GPIOB->ODR ^= (0x1U << GPIO_ODR_OD14_Pos);
 8000402:	4b04      	ldr	r3, [pc, #16]	; (8000414 <main+0xa4>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a03      	ldr	r2, [pc, #12]	; (8000414 <main+0xa4>)
 8000408:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800040c:	6153      	str	r3, [r2, #20]
		if(1U == u8Update)
 800040e:	e7d3      	b.n	80003b8 <main+0x48>
 8000410:	58024400 	.word	0x58024400
 8000414:	58020400 	.word	0x58020400
 8000418:	10004001 	.word	0x10004001
 800041c:	00fffff0 	.word	0x00fffff0
 8000420:	24000020 	.word	0x24000020
 8000424:	2400001c 	.word	0x2400001c

08000428 <SysTick_Handler>:
		}
	}
}

void SysTick_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	u32Ticks++;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <SysTick_Handler+0x20>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	3301      	adds	r3, #1
 8000432:	4a05      	ldr	r2, [pc, #20]	; (8000448 <SysTick_Handler+0x20>)
 8000434:	6013      	str	r3, [r2, #0]
	u8Update = 1U;
 8000436:	4b05      	ldr	r3, [pc, #20]	; (800044c <SysTick_Handler+0x24>)
 8000438:	2201      	movs	r2, #1
 800043a:	701a      	strb	r2, [r3, #0]
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	2400001c 	.word	0x2400001c
 800044c:	24000020 	.word	0x24000020

08000450 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000452:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000454:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000458:	480c      	ldr	r0, [pc, #48]	; (800048c <LoopForever+0x6>)
  ldr r1, =_edata
 800045a:	490d      	ldr	r1, [pc, #52]	; (8000490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800045c:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <LoopForever+0xe>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000460:	e002      	b.n	8000468 <LoopCopyDataInit>

08000462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000466:	3304      	adds	r3, #4

08000468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800046c:	d3f9      	bcc.n	8000462 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046e:	4a0a      	ldr	r2, [pc, #40]	; (8000498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000470:	4c0a      	ldr	r4, [pc, #40]	; (800049c <LoopForever+0x16>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000474:	e001      	b.n	800047a <LoopFillZerobss>

08000476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000478:	3204      	adds	r2, #4

0800047a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800047c:	d3fb      	bcc.n	8000476 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800047e:	f000 f811 	bl	80004a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000482:	f7ff ff75 	bl	8000370 <main>

08000486 <LoopForever>:

LoopForever:
    b LoopForever
 8000486:	e7fe      	b.n	8000486 <LoopForever>
  ldr   r0, =_estack
 8000488:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800048c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000490:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 8000494:	0800050c 	.word	0x0800050c
  ldr r2, =_sbss
 8000498:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 800049c:	24000024 	.word	0x24000024

080004a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a0:	e7fe      	b.n	80004a0 <ADC1_2_IRQHandler>
	...

080004a4 <__libc_init_array>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	4d0d      	ldr	r5, [pc, #52]	; (80004dc <__libc_init_array+0x38>)
 80004a8:	4c0d      	ldr	r4, [pc, #52]	; (80004e0 <__libc_init_array+0x3c>)
 80004aa:	1b64      	subs	r4, r4, r5
 80004ac:	10a4      	asrs	r4, r4, #2
 80004ae:	2600      	movs	r6, #0
 80004b0:	42a6      	cmp	r6, r4
 80004b2:	d109      	bne.n	80004c8 <__libc_init_array+0x24>
 80004b4:	4d0b      	ldr	r5, [pc, #44]	; (80004e4 <__libc_init_array+0x40>)
 80004b6:	4c0c      	ldr	r4, [pc, #48]	; (80004e8 <__libc_init_array+0x44>)
 80004b8:	f000 f818 	bl	80004ec <_init>
 80004bc:	1b64      	subs	r4, r4, r5
 80004be:	10a4      	asrs	r4, r4, #2
 80004c0:	2600      	movs	r6, #0
 80004c2:	42a6      	cmp	r6, r4
 80004c4:	d105      	bne.n	80004d2 <__libc_init_array+0x2e>
 80004c6:	bd70      	pop	{r4, r5, r6, pc}
 80004c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004cc:	4798      	blx	r3
 80004ce:	3601      	adds	r6, #1
 80004d0:	e7ee      	b.n	80004b0 <__libc_init_array+0xc>
 80004d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d6:	4798      	blx	r3
 80004d8:	3601      	adds	r6, #1
 80004da:	e7f2      	b.n	80004c2 <__libc_init_array+0x1e>
 80004dc:	08000504 	.word	0x08000504
 80004e0:	08000504 	.word	0x08000504
 80004e4:	08000504 	.word	0x08000504
 80004e8:	08000508 	.word	0x08000508

080004ec <_init>:
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ee:	bf00      	nop
 80004f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f2:	bc08      	pop	{r3}
 80004f4:	469e      	mov	lr, r3
 80004f6:	4770      	bx	lr

080004f8 <_fini>:
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	bf00      	nop
 80004fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fe:	bc08      	pop	{r3}
 8000500:	469e      	mov	lr, r3
 8000502:	4770      	bx	lr
